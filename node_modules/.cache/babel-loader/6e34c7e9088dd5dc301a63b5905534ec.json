{"ast":null,"code":"import _slicedToArray from \"C:\\\\\\u042D\\u043B\\u0438\\u044F\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\\\u042D\\u043B\\u0438\\u044F\\\\React\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport moment from 'moment'; //function Clock\n\nfunction Lapse(props) {\n  return React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    className: Lapse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, props.lapse.id), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, props.lapse.end_time), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, props.lapse.duration), \"/* \", React.createElement(\"button\", {\n    onClick: props.onDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"x\"), \"*/\");\n}\n\nfunction LapsesList(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        lapses = _useState2[0],\n        setLapses = _useState2[1];\n\n  let addLapse = lapse => {\n    setLapses([lapse, ...lapses]);\n  };\n\n  return React.createElement(\"div\", {\n    className: LapsesList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), lapses.map(lapse => React.createElement(Lapse, {\n    key: lapse.id,\n    lapse: lapse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })));\n} // function startButton(props){\n//         return(\n//         <button onClick={this.props.handleStart} className=\"startButton\"> START </button>\n//         );\n// }\n//\n// function twoButtons(props){\n//     let makeLapse = () => {\n//         this.props.onLap({\n//             id: this.props.idLapse + 1,\n//             end_time: \"tatata\",\n//             duration: \"tatata\",\n//         });\n//     };\n//\n//         return (\n//     (this.props.resume === true)? <div><button>STOP</button><button onClick={this.makeLapse}>LAP</button></div>\n//     : <div><button>RESUME</button><button onClick={this.props.onReset}>RESET</button></div>\n//     );\n// }\n\n\nfunction LapsesTable() {\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        start = _useState4[0],\n        setStart = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        stop = _useState6[0],\n        setStop = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        resume = _useState8[0],\n        setResume = _useState8[1]; // const [idLapse, setIdLapse] = useState(0);\n  //\n  // const [lapses, setLapses] = useState([]);\n  //\n  // let Lap = lapse => {\n  //     setIdLapse(idLapse + 1);\n  //     setLapses([lapse, ...lapses]);\n  // };\n\n  /* let handleReset = () => {\r\n       setStart(false);\r\n       setStop(false);\r\n       setResume(false);\r\n       setIdLapse(0);\r\n       setLapses([]);\r\n   };*/\n\n  /*return (\r\n      ({start} === false ?\r\n          <div>\r\n              <startButton onClick={() => setStart(!start)}/>\r\n          </div> :\r\n          <div>\r\n              <twoButtons onReset={() => this.handleReset()}\r\n                          onLap={() => this.Lap()} idLapse={idLapse}\r\n                />\r\n              <div className={LapsesList}>\r\n                  <hr/>\r\n                  {lapses.map(lapse => (\r\n                      <Lapse\r\n                          key={lapse.id}\r\n                          lapse={lapse}\r\n                      />\r\n                  ))}\r\n              </div>\r\n          </div>)\r\n  );*/\n\n}\n\n;\n\nfunction startButton(props) {\n  return React.createElement(\"button\", {\n    onClick: this.props.handleStart,\n    className: \"startButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \" START \");\n}\n\nfunction twoButtons(props) {\n  let makeLapse = () => {\n    this.props.onLap({\n      id: this.props.idLapse + 1,\n      end_time: \"tatata\",\n      duration: \"tatata\"\n    });\n  };\n\n  return this.props.resume === true ? React.createElement(\"div\", {\n    className: \"twoButtons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"stopButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"STOP\"), React.createElement(\"button\", {\n    onClick: this.makeLapse,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"LAP\")) : React.createElement(\"div\", {\n    className: \"twoButtons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"RESUME\"), React.createElement(\"button\", {\n    onClick: this.props.onReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"RESET\"));\n}\n\nfunction Timer(props) {\n  const _useState9 = useState(moment.duration(props.interval)),\n        _useState10 = _slicedToArray(_useState9, 2),\n        duration = _useState10[0],\n        setDuration = _useState10[1];\n\n  const milliseconds = Math.round(duration.milliseconds() / 10);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, duration.minutes(), \":\", duration.seconds(), \".\", milliseconds);\n}\n\nfunction App() {\n  const _useState11 = useState(1234567),\n        _useState12 = _slicedToArray(_useState11, 2),\n        timer = _useState12[0],\n        setTimer = _useState12[1];\n\n  const _useState13 = useState(0),\n        _useState14 = _slicedToArray(_useState13, 2),\n        idLapse = _useState14[0],\n        setIdLapse = _useState14[1];\n\n  const _useState15 = useState([12345, 2345, 34567, 98765]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        lapses = _useState16[0],\n        setLapses = _useState16[1]; //const [lapses, setLapses] = useState([]);\n  // const [start, setStart] = useState(false);\n  // const [stop, setStop] = useState(false);\n  // const [resume, setResume] = useState(false);\n\n\n  let Lap = lapse => {\n    setIdLapse(idLapse + 1);\n    setLapses([lapse, ...lapses]);\n  }; // let handleReset = () => {\n  //     setStart(false);\n  //     setStop(false);\n  //     setResume(false);\n  //     setIdLapse(0);\n  //     setLapses([]);\n  // };\n\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Timer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Timer, {\n    interval: timer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })));\n  /*({start} === false ?\r\n      <div>\r\n          <startButton onClick={() => setStart(!start)}/>\r\n      </div> :\r\n      <div>\r\n          <twoButtons onReset={() => this.handleReset()}\r\n                      onLap={() => this.Lap()} idLapse={idLapse}\r\n            />\r\n          <div className={LapsesList}>\r\n              <hr/>\r\n              {lapses.map(lapse => (\r\n                  <Lapse\r\n                      key={lapse.id}\r\n                      lapse={lapse}\r\n                  />\r\n              ))}\r\n          </div>\r\n      </div>)\r\n  );*/\n}\n\nfunction Example() {\n  // Объявляем новую переменную состояния, которую назовём \"count\"\n  const _useState17 = useState(0),\n        _useState18 = _slicedToArray(_useState17, 2),\n        count = _useState18[0],\n        setCount = _useState18[1];\n\n  useEffect(() => {\n    document.title = \"\\u0412\\u044B \\u043D\\u0430\\u0436\\u0430\\u043B\\u0438 \".concat(count, \" \\u0440\\u0430\\u0437\");\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"\\u0412\\u044B \\u043A\\u043B\\u0438\\u043A\\u043D\\u0443\\u043B\\u0438 \", count, \" \\u0440\\u0430\\u0437\"), React.createElement(\"button\", {\n    onClick: () => setCount(count + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"\\u041A\\u043B\\u0438\\u043A\\u043D\\u0438 \\u043C\\u0435\\u043D\\u044F!\"));\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 226\n  },\n  __self: this\n}), document.getElementById(\"root\")); //import logo from \"../logo.svg\"\n\n/*function Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}*/","map":{"version":3,"sources":["C:\\Элия\\React\\my-app\\src\\index.js"],"names":["React","useState","useEffect","ReactDOM","moment","Lapse","props","display","justifyContent","lapse","id","end_time","duration","onDelete","LapsesList","lapses","setLapses","addLapse","map","LapsesTable","start","setStart","stop","setStop","resume","setResume","startButton","handleStart","twoButtons","makeLapse","onLap","idLapse","onReset","Timer","interval","setDuration","milliseconds","Math","round","minutes","seconds","App","timer","setTimer","setIdLapse","Lap","Example","count","setCount","document","title","render","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport moment from 'moment';\r\n\r\n//function Clock\r\n\r\nfunction Lapse(props){\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }} className={Lapse}>\r\n            {/*<div*/}\r\n            {/*    onClick={props.toggleComplete}*/}\r\n            {/*>*/}\r\n            <span>{props.lapse.id}</span>\r\n            <span>{props.lapse.end_time}</span>\r\n            <span>{props.lapse.duration}</span>\r\n\r\n            {/*<span>01</span>*/}\r\n            {/*<span>02</span>*/}\r\n            {/*<span>{props.lap.duration}</span>*/}\r\n            {/*</div>*/}\r\n           /* <button onClick={props.onDelete}>x</button>*/\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction LapsesList(props) {\r\n    const [lapses, setLapses] = useState([]);\r\n\r\n    let addLapse = lapse => {\r\n        setLapses([lapse,...lapses]);\r\n    };\r\n\r\n    return (\r\n        <div className={LapsesList}>\r\n            <hr/>\r\n            {lapses.map(lapse => (\r\n                <Lapse\r\n                    key={lapse.id}\r\n                    lapse={lapse}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n// function startButton(props){\r\n//         return(\r\n//         <button onClick={this.props.handleStart} className=\"startButton\"> START </button>\r\n//         );\r\n// }\r\n//\r\n// function twoButtons(props){\r\n//     let makeLapse = () => {\r\n//         this.props.onLap({\r\n//             id: this.props.idLapse + 1,\r\n//             end_time: \"tatata\",\r\n//             duration: \"tatata\",\r\n//         });\r\n//     };\r\n//\r\n//         return (\r\n//     (this.props.resume === true)? <div><button>STOP</button><button onClick={this.makeLapse}>LAP</button></div>\r\n//     : <div><button>RESUME</button><button onClick={this.props.onReset}>RESET</button></div>\r\n//     );\r\n// }\r\n\r\nfunction LapsesTable() {\r\n    const [start, setStart] = useState(false);\r\n    const [stop, setStop] = useState(false);\r\n    const [resume, setResume] = useState(false);\r\n\r\n    // const [idLapse, setIdLapse] = useState(0);\r\n    //\r\n    // const [lapses, setLapses] = useState([]);\r\n    //\r\n    // let Lap = lapse => {\r\n    //     setIdLapse(idLapse + 1);\r\n    //     setLapses([lapse, ...lapses]);\r\n    // };\r\n\r\n   /* let handleReset = () => {\r\n        setStart(false);\r\n        setStop(false);\r\n        setResume(false);\r\n        setIdLapse(0);\r\n        setLapses([]);\r\n    };*/\r\n\r\n    /*return (\r\n        ({start} === false ?\r\n            <div>\r\n                <startButton onClick={() => setStart(!start)}/>\r\n            </div> :\r\n            <div>\r\n                <twoButtons onReset={() => this.handleReset()}\r\n                            onLap={() => this.Lap()} idLapse={idLapse}\r\n\r\n                />\r\n                <div className={LapsesList}>\r\n                    <hr/>\r\n                    {lapses.map(lapse => (\r\n                        <Lapse\r\n                            key={lapse.id}\r\n                            lapse={lapse}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>)\r\n    );*/\r\n};\r\n\r\nfunction startButton(props){\r\n    return(\r\n        <button onClick={this.props.handleStart} className=\"startButton\"> START </button>\r\n    );\r\n}\r\n\r\nfunction twoButtons(props){\r\n    let makeLapse = () => {\r\n        this.props.onLap({\r\n            id: this.props.idLapse + 1,\r\n            end_time: \"tatata\",\r\n            duration: \"tatata\",\r\n        });\r\n    };\r\n\r\n    return (\r\n        (this.props.resume === true)?\r\n            <div className=\"twoButtons\">\r\n                <button className=\"stopButton\">STOP</button>\r\n                <button onClick={this.makeLapse}>LAP</button>\r\n            </div>\r\n            :\r\n            <div className=\"twoButtons\">\r\n                <button>RESUME</button>\r\n                <button onClick={this.props.onReset}>RESET</button>\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction Timer(props){\r\n    const [duration, setDuration] = useState(moment.duration(props.interval));\r\n    const milliseconds = Math.round(duration.milliseconds()/10);\r\n    return (\r\n        <div>{duration.minutes()}:{duration.seconds()}.{milliseconds}</div>\r\n    )\r\n}\r\n\r\nfunction App(){\r\n    const [timer, setTimer] = useState(1234567);\r\n    const [idLapse, setIdLapse] = useState(0);\r\n    const [lapses, setLapses] = useState([12345,2345,34567,98765]);\r\n\r\n    //const [lapses, setLapses] = useState([]);\r\n\r\n    // const [start, setStart] = useState(false);\r\n    // const [stop, setStop] = useState(false);\r\n    // const [resume, setResume] = useState(false);\r\n\r\n\r\n    let Lap = lapse => {\r\n        setIdLapse(idLapse + 1);\r\n        setLapses([lapse, ...lapses]);\r\n    };\r\n\r\n    // let handleReset = () => {\r\n    //     setStart(false);\r\n    //     setStop(false);\r\n    //     setResume(false);\r\n    //     setIdLapse(0);\r\n    //     setLapses([]);\r\n    // };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Timer\">\r\n                <Timer interval={timer}/>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    /*({start} === false ?\r\n        <div>\r\n            <startButton onClick={() => setStart(!start)}/>\r\n        </div> :\r\n        <div>\r\n            <twoButtons onReset={() => this.handleReset()}\r\n                        onLap={() => this.Lap()} idLapse={idLapse}\r\n\r\n            />\r\n            <div className={LapsesList}>\r\n                <hr/>\r\n                {lapses.map(lapse => (\r\n                    <Lapse\r\n                        key={lapse.id}\r\n                        lapse={lapse}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>)\r\n);*/\r\n}\r\n\r\n\r\nfunction Example() {\r\n    // Объявляем новую переменную состояния, которую назовём \"count\"\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        document.title = `Вы нажали ${count} раз`;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <p>Вы кликнули {count} раз</p>\r\n            <button onClick={() => setCount(count + 1)}>\r\n                Кликни меня!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n//import logo from \"../logo.svg\"\r\n/*function Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}*/"]},"metadata":{},"sourceType":"module"}